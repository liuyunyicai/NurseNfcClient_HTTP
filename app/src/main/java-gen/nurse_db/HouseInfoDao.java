package nurse_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nurse_db.HouseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOUSE_INFO".
*/
public class HouseInfoDao extends AbstractDao<HouseInfo, String> {

    public static final String TABLENAME = "HOUSE_INFO";

    /**
     * Properties of entity HouseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property House_id = new Property(0, String.class, "house_id", true, "HOUSE_ID");
        public final static Property Nurse_id = new Property(1, String.class, "nurse_id", false, "NURSE_ID");
        public final static Property House_state = new Property(2, String.class, "house_state", false, "HOUSE_STATE");
    };


    public HouseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HouseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOUSE_INFO\" (" + //
                "\"HOUSE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: house_id
                "\"NURSE_ID\" TEXT NOT NULL ," + // 1: nurse_id
                "\"HOUSE_STATE\" TEXT NOT NULL );"); // 2: house_state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOUSE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HouseInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getHouse_id());
        stmt.bindString(2, entity.getNurse_id());
        stmt.bindString(3, entity.getHouse_state());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HouseInfo readEntity(Cursor cursor, int offset) {
        HouseInfo entity = new HouseInfo( //
            cursor.getString(offset + 0), // house_id
            cursor.getString(offset + 1), // nurse_id
            cursor.getString(offset + 2) // house_state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HouseInfo entity, int offset) {
        entity.setHouse_id(cursor.getString(offset + 0));
        entity.setNurse_id(cursor.getString(offset + 1));
        entity.setHouse_state(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HouseInfo entity, long rowId) {
        return entity.getHouse_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HouseInfo entity) {
        if(entity != null) {
            return entity.getHouse_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
