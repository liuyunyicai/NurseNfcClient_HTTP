package nurse_db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import nurse_db.TemperatureInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEMPERATURE_INFO".
*/
public class TemperatureInfoDao extends AbstractDao<TemperatureInfo, Long> {

    public static final String TABLENAME = "TEMPERATURE_INFO";

    /**
     * Properties of entity TemperatureInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Tag_id = new Property(1, String.class, "tag_id", false, "TAG_ID");
        public final static Property Temper_num = new Property(2, float.class, "temper_num", false, "TEMPER_NUM");
        public final static Property Nurse_id = new Property(3, String.class, "nurse_id", false, "NURSE_ID");
        public final static Property Last_time = new Property(4, java.util.Date.class, "last_time", false, "LAST_TIME");
        public final static Property Next_time = new Property(5, String.class, "next_time", false, "NEXT_TIME");
    };

    private DaoSession daoSession;


    public TemperatureInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TemperatureInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEMPERATURE_INFO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TAG_ID\" TEXT NOT NULL ," + // 1: tag_id
                "\"TEMPER_NUM\" REAL NOT NULL ," + // 2: temper_num
                "\"NURSE_ID\" TEXT NOT NULL ," + // 3: nurse_id
                "\"LAST_TIME\" INTEGER NOT NULL ," + // 4: last_time
                "\"NEXT_TIME\" TEXT);"); // 5: next_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEMPERATURE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TemperatureInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getTag_id());
        stmt.bindDouble(3, entity.getTemper_num());
        stmt.bindString(4, entity.getNurse_id());
        stmt.bindLong(5, entity.getLast_time().getTime());
 
        String next_time = entity.getNext_time();
        if (next_time != null) {
            stmt.bindString(6, next_time);
        }
    }

    @Override
    protected void attachEntity(TemperatureInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TemperatureInfo readEntity(Cursor cursor, int offset) {
        TemperatureInfo entity = new TemperatureInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // tag_id
            cursor.getFloat(offset + 2), // temper_num
            cursor.getString(offset + 3), // nurse_id
            new java.util.Date(cursor.getLong(offset + 4)), // last_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // next_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TemperatureInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTag_id(cursor.getString(offset + 1));
        entity.setTemper_num(cursor.getFloat(offset + 2));
        entity.setNurse_id(cursor.getString(offset + 3));
        entity.setLast_time(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setNext_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TemperatureInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TemperatureInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getNurseInfoDao().getAllColumns());
            builder.append(" FROM TEMPERATURE_INFO T");
            builder.append(" LEFT JOIN NURSE_INFO T0 ON T.\"NURSE_ID\"=T0.\"NURSE_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TemperatureInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        TemperatureInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        NurseInfo nurseInfo = loadCurrentOther(daoSession.getNurseInfoDao(), cursor, offset);
         if(nurseInfo != null) {
            entity.setNurseInfo(nurseInfo);
        }

        return entity;    
    }

    public TemperatureInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TemperatureInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TemperatureInfo> list = new ArrayList<TemperatureInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TemperatureInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TemperatureInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
