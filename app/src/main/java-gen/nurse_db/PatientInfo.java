package nurse_db;

import nurse_db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PATIENT_INFO".
 */
public class PatientInfo {

    /** Not-null value. */
    private String patient_id;
    /** Not-null value. */
    private String tag_id;
    /** Not-null value. */
    private String patient_name;
    private int patient_age;
    /** Not-null value. */
    private String patient_gender;
    /** Not-null value. */
    private String patient_record;
    /** Not-null value. */
    private String patient_photo;
    /** Not-null value. */
    private String bed_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PatientInfoDao myDao;

    private BedInfo bedInfo;
    private String bedInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PatientInfo() {
    }

    public PatientInfo(String patient_id) {
        this.patient_id = patient_id;
    }

    public PatientInfo(String patient_id, String tag_id, String patient_name, int patient_age, String patient_gender, String patient_record, String patient_photo, String bed_id) {
        this.patient_id = patient_id;
        this.tag_id = tag_id;
        this.patient_name = patient_name;
        this.patient_age = patient_age;
        this.patient_gender = patient_gender;
        this.patient_record = patient_record;
        this.patient_photo = patient_photo;
        this.bed_id = bed_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPatientInfoDao() : null;
    }

    /** Not-null value. */
    public String getPatient_id() {
        return patient_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPatient_id(String patient_id) {
        this.patient_id = patient_id;
    }

    /** Not-null value. */
    public String getTag_id() {
        return tag_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTag_id(String tag_id) {
        this.tag_id = tag_id;
    }

    /** Not-null value. */
    public String getPatient_name() {
        return patient_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPatient_name(String patient_name) {
        this.patient_name = patient_name;
    }

    public int getPatient_age() {
        return patient_age;
    }

    public void setPatient_age(int patient_age) {
        this.patient_age = patient_age;
    }

    /** Not-null value. */
    public String getPatient_gender() {
        return patient_gender;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPatient_gender(String patient_gender) {
        this.patient_gender = patient_gender;
    }

    /** Not-null value. */
    public String getPatient_record() {
        return patient_record;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPatient_record(String patient_record) {
        this.patient_record = patient_record;
    }

    /** Not-null value. */
    public String getPatient_photo() {
        return patient_photo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPatient_photo(String patient_photo) {
        this.patient_photo = patient_photo;
    }

    /** Not-null value. */
    public String getBed_id() {
        return bed_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBed_id(String bed_id) {
        this.bed_id = bed_id;
    }

    /** To-one relationship, resolved on first access. */
    public BedInfo getBedInfo() {
        String __key = this.bed_id;
        if (bedInfo__resolvedKey == null || bedInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BedInfoDao targetDao = daoSession.getBedInfoDao();
            BedInfo bedInfoNew = targetDao.load(__key);
            synchronized (this) {
                bedInfo = bedInfoNew;
            	bedInfo__resolvedKey = __key;
            }
        }
        return bedInfo;
    }

    public void setBedInfo(BedInfo bedInfo) {
        if (bedInfo == null) {
            throw new DaoException("To-one property 'bed_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.bedInfo = bedInfo;
            bed_id = bedInfo.getBed_id();
            bedInfo__resolvedKey = bed_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
