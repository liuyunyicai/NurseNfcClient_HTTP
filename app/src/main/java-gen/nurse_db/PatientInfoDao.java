package nurse_db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import nurse_db.PatientInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT_INFO".
*/
public class PatientInfoDao extends AbstractDao<PatientInfo, String> {

    public static final String TABLENAME = "PATIENT_INFO";

    /**
     * Properties of entity PatientInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Patient_id = new Property(0, String.class, "patient_id", true, "PATIENT_ID");
        public final static Property Tag_id = new Property(1, String.class, "tag_id", false, "TAG_ID");
        public final static Property Patient_name = new Property(2, String.class, "patient_name", false, "PATIENT_NAME");
        public final static Property Patient_age = new Property(3, int.class, "patient_age", false, "PATIENT_AGE");
        public final static Property Patient_gender = new Property(4, String.class, "patient_gender", false, "PATIENT_GENDER");
        public final static Property Patient_record = new Property(5, String.class, "patient_record", false, "PATIENT_RECORD");
        public final static Property Patient_photo = new Property(6, String.class, "patient_photo", false, "PATIENT_PHOTO");
        public final static Property Bed_id = new Property(7, String.class, "bed_id", false, "BED_ID");
    };

    private DaoSession daoSession;


    public PatientInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PatientInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT_INFO\" (" + //
                "\"PATIENT_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: patient_id
                "\"TAG_ID\" TEXT NOT NULL UNIQUE ," + // 1: tag_id
                "\"PATIENT_NAME\" TEXT NOT NULL ," + // 2: patient_name
                "\"PATIENT_AGE\" INTEGER NOT NULL ," + // 3: patient_age
                "\"PATIENT_GENDER\" TEXT NOT NULL ," + // 4: patient_gender
                "\"PATIENT_RECORD\" TEXT NOT NULL ," + // 5: patient_record
                "\"PATIENT_PHOTO\" TEXT NOT NULL ," + // 6: patient_photo
                "\"BED_ID\" TEXT NOT NULL );"); // 7: bed_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PatientInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPatient_id());
        stmt.bindString(2, entity.getTag_id());
        stmt.bindString(3, entity.getPatient_name());
        stmt.bindLong(4, entity.getPatient_age());
        stmt.bindString(5, entity.getPatient_gender());
        stmt.bindString(6, entity.getPatient_record());
        stmt.bindString(7, entity.getPatient_photo());
        stmt.bindString(8, entity.getBed_id());
    }

    @Override
    protected void attachEntity(PatientInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PatientInfo readEntity(Cursor cursor, int offset) {
        PatientInfo entity = new PatientInfo( //
            cursor.getString(offset + 0), // patient_id
            cursor.getString(offset + 1), // tag_id
            cursor.getString(offset + 2), // patient_name
            cursor.getInt(offset + 3), // patient_age
            cursor.getString(offset + 4), // patient_gender
            cursor.getString(offset + 5), // patient_record
            cursor.getString(offset + 6), // patient_photo
            cursor.getString(offset + 7) // bed_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PatientInfo entity, int offset) {
        entity.setPatient_id(cursor.getString(offset + 0));
        entity.setTag_id(cursor.getString(offset + 1));
        entity.setPatient_name(cursor.getString(offset + 2));
        entity.setPatient_age(cursor.getInt(offset + 3));
        entity.setPatient_gender(cursor.getString(offset + 4));
        entity.setPatient_record(cursor.getString(offset + 5));
        entity.setPatient_photo(cursor.getString(offset + 6));
        entity.setBed_id(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PatientInfo entity, long rowId) {
        return entity.getPatient_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PatientInfo entity) {
        if(entity != null) {
            return entity.getPatient_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBedInfoDao().getAllColumns());
            builder.append(" FROM PATIENT_INFO T");
            builder.append(" LEFT JOIN BED_INFO T0 ON T.\"BED_ID\"=T0.\"BED_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PatientInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        PatientInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BedInfo bedInfo = loadCurrentOther(daoSession.getBedInfoDao(), cursor, offset);
         if(bedInfo != null) {
            entity.setBedInfo(bedInfo);
        }

        return entity;    
    }

    public PatientInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PatientInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PatientInfo> list = new ArrayList<PatientInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PatientInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PatientInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
