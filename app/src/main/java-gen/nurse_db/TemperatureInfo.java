package nurse_db;

import nurse_db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TEMPERATURE_INFO".
 */
public class TemperatureInfo {

    private long id;
    /** Not-null value. */
    private String tag_id;
    private float temper_num;
    /** Not-null value. */
    private String nurse_id;
    /** Not-null value. */
    private java.util.Date last_time;
    private String next_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TemperatureInfoDao myDao;

    private NurseInfo nurseInfo;
    private String nurseInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TemperatureInfo() {
    }

    public TemperatureInfo(long id) {
        this.id = id;
    }

    public TemperatureInfo(long id, String tag_id, float temper_num, String nurse_id, java.util.Date last_time, String next_time) {
        this.id = id;
        this.tag_id = tag_id;
        this.temper_num = temper_num;
        this.nurse_id = nurse_id;
        this.last_time = last_time;
        this.next_time = next_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTemperatureInfoDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTag_id() {
        return tag_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTag_id(String tag_id) {
        this.tag_id = tag_id;
    }

    public float getTemper_num() {
        return temper_num;
    }

    public void setTemper_num(float temper_num) {
        this.temper_num = temper_num;
    }

    /** Not-null value. */
    public String getNurse_id() {
        return nurse_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNurse_id(String nurse_id) {
        this.nurse_id = nurse_id;
    }

    /** Not-null value. */
    public java.util.Date getLast_time() {
        return last_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLast_time(java.util.Date last_time) {
        this.last_time = last_time;
    }

    public String getNext_time() {
        return next_time;
    }

    public void setNext_time(String next_time) {
        this.next_time = next_time;
    }

    /** To-one relationship, resolved on first access. */
    public NurseInfo getNurseInfo() {
        String __key = this.nurse_id;
        if (nurseInfo__resolvedKey == null || nurseInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NurseInfoDao targetDao = daoSession.getNurseInfoDao();
            NurseInfo nurseInfoNew = targetDao.load(__key);
            synchronized (this) {
                nurseInfo = nurseInfoNew;
            	nurseInfo__resolvedKey = __key;
            }
        }
        return nurseInfo;
    }

    public void setNurseInfo(NurseInfo nurseInfo) {
        if (nurseInfo == null) {
            throw new DaoException("To-one property 'nurse_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.nurseInfo = nurseInfo;
            nurse_id = nurseInfo.getNurse_id();
            nurseInfo__resolvedKey = nurse_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
